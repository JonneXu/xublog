{
  "_args": [
    [
      {
        "raw": "eslint-friendly-formatter@^2.0.7",
        "scope": null,
        "escapedName": "eslint-friendly-formatter",
        "name": "eslint-friendly-formatter",
        "rawSpec": "^2.0.7",
        "spec": ">=2.0.7 <3.0.0",
        "type": "range"
      },
      "/root/xublog"
    ]
  ],
  "_from": "eslint-friendly-formatter@>=2.0.7 <3.0.0",
  "_id": "eslint-friendly-formatter@2.0.7",
  "_inCache": true,
  "_location": "/eslint-friendly-formatter",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/eslint-friendly-formatter-2.0.7.tgz_1483355645099_0.05185303767211735"
  },
  "_npmUser": {
    "name": "royriojas",
    "email": "royriojas@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eslint-friendly-formatter@^2.0.7",
    "scope": null,
    "escapedName": "eslint-friendly-formatter",
    "name": "eslint-friendly-formatter",
    "rawSpec": "^2.0.7",
    "spec": ">=2.0.7 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-friendly-formatter/-/eslint-friendly-formatter-2.0.7.tgz",
  "_shasum": "657f95a19af4989636afebb1cc9de6cebbd088ee",
  "_shrinkwrap": null,
  "_spec": "eslint-friendly-formatter@^2.0.7",
  "_where": "/root/xublog",
  "author": {
    "name": "Roy Riojas",
    "url": "http://royriojas.com"
  },
  "bugs": {
    "url": "https://github.com/royriojas/eslint-friendly-formatter/issues"
  },
  "changelogx": {
    "issueIDRegExp": "#(\\d+)",
    "commitURL": "https://github.com/royriojas/eslint-friendly-formatter/commit/{0}",
    "authorURL": "https://github.com/{0}",
    "issueIDURL": "https://github.com/royriojas/eslint-friendly-formatter/issues/{0}",
    "projectName": "eslint-friendly-formatter"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "extend": "^3.0.0",
    "minimist": "^1.2.0",
    "text-table": "^0.2.0"
  },
  "description": " simple formatter/reporter for eslint that's friendly with Sublime Text and iterm2 'click to open file' functionality",
  "devDependencies": {
    "changelogx": "^1.0.18",
    "esbeautifier": "10.1.1",
    "eslint": "^2.10.2",
    "glob-expand": "0.2.1",
    "istanbul": "^0.3.17",
    "mocha-runner": "^1.0.8",
    "precommit": "1.2.2",
    "prepush": "3.1.11",
    "proxyquire": "^1.6.0",
    "read-file": "^0.1.2",
    "read-json-sync": "^1.1.0",
    "watch-spawn": "^1.0.3",
    "write": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "657f95a19af4989636afebb1cc9de6cebbd088ee",
    "tarball": "https://registry.npmjs.org/eslint-friendly-formatter/-/eslint-friendly-formatter-2.0.7.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js",
    "process.js"
  ],
  "gitHead": "9ac3e4866e5c6dba09e0185dd4a1dd284a432d57",
  "homepage": "https://github.com/royriojas/eslint-friendly-formatter#readme",
  "keywords": [
    "eslint",
    "formatter",
    "reporter",
    "eslint formatter",
    "stylish"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "royriojas",
      "email": "royriojas@gmail.com"
    }
  ],
  "name": "eslint-friendly-formatter",
  "optionalDependencies": {},
  "precommit": [
    "npm run verify"
  ],
  "prepush": [
    "npm run verify"
  ],
  "readme": "# [eslint](https://github.com/nzakas/eslint/)-friendly-formatter\n> A simple formatter/reporter for [ESLint](https://github.com/nzakas/eslint/) that's friendly with Sublime Text and iterm2 \"click to open file\" functionality\n\n[![NPM Version](http://img.shields.io/npm/v/eslint-friendly-formatter.svg?style=flat)](https://npmjs.org/package/eslint-friendly-formatter)\n[![Build Status](http://img.shields.io/travis/royriojas/eslint-friendly-formatter.svg?style=flat)](https://travis-ci.org/royriojas/eslint-friendly-formatter)\n\n## Motivation for this module\n\nI decided to use [eslint](https://github.com/nzakas/eslint/) to verify my code and sadly the reporter was not terminal\nfriendly. Basically I cannot click on the file to open it with my text editor and go directly to the line where\nthe error was reported. This module fixes that issue, by using the syntax that \"sublime text\" introduced to open files.\n\n> Filenames may be given a :line or :line:column suffix to open at a specific\n> location.\n\nThis module is based on the original `stylish` formatter that is now part of ESLint, it adds the following\n\n- All the errors are reported at the end, so no more search for errors between tons of report lines\n- RuleIds are clickable on terminals like iTerm2 and take you to the ruleId documentation site.\n- A summary is shown at the end with the offended ruleIds, ruleIds are also clickable.\n- It also shows a bit of context where the error happened, Making easier to understand the nature of the error\n- If you use [iTerm2](http://iterm2.com/) or [Guake](http://guake-project.org/)\\* the link for the file becomes clickable **and will open your editor at the given line**.\n  Please make sure you have properly configured the option to open uris that matches files with your editor of choice.\n  Sublime is a great choice!, but this should work as well with other editors that understand the pattern used by sublime\n\n  \\* Note: Until Guake v0.7.3 is released, it may be necessary to compile master from source.\n\n## Example of the output\n\n![screenshot](clickable-rules2.png)\n\n## install\n\n```bash\nnpm i --save-dev eslint-friendly-formatter\n```\n\n## Intellij/Webstorm/PhpStorm integration\n0. Install `eslint` and `eslint-friendly-formatter`.\n\n   ```bash\n   npm i -D eslint eslint-friendly-formatter\n   ```\n\n1. Add a script to your package json like:\n\n   ```javascript\n   {\n     \"scripts\": {\n       \"eslint\": \"eslint --format 'node_modules/eslint-friendly-formatter' file1 file2 dir1/ dir2/\",\n     }\n   }\n   ```\n\n   **Note**: In windows you might not need the quotes around the path to the module.\n\n   ```javascript\n   {\n     \"scripts\": {\n       \"eslint\": \"eslint --format node_modules/eslint-friendly-formatter file1 file2 dir1/ dir2/\",\n     }\n   }\n   ```\n\n   see [issue #17](https://github.com/royriojas/eslint-friendly-formatter/issues/17)\n\n1. Create a external tool to run eslint using this module as your formatter like this\n   - program: `npm`\n   - parameters: `run eslint`\n   - working directory: `$ProjectFileDir$`\n\n2. Use an output filter like: (Please note the 2 spaces before `$FILE_PATH$`)\n\n   ```bash\n     $FILE_PATH$.*:$LINE$.*:$COLUMN$\n   ```\n3. When launching the tool now the files will be also clickable, see:\n   ![screenshot](screenshot3.png)\n\n## Usage\n\nIn the command line\n\n```bash\n# just make sure you pass the path to the module to the format option of eslint\neslint.js --format './node_modules/eslint-friendly-formatter/index.js' index.js test/ -c './eslint.json'\n```\n\nOr as a module\n\n```javascript\nvar eslint = require('eslint');\nvar opts = readJson('./path/to/options');\n\nvar engine = new eslint.CLIEngine( opts );\nvar report = engine.executeOnFiles( ['file1.js', 'file2.js'/*, ...*/] );\nvar results = report.results || [];\n\nvar formatter = require('eslint-friendly-formatter');\nvar output = formatter(results);\n\n// this will print the report if any...\nconsole.log(output);\n\n```\nIt works with `gulp` and `gulp-eslint`\n\n```javascript\nvar friendlyFormatter = require(\"eslint-friendly-formatter\");\n// Your js task\ngulp.task(\"javascript\", function() {\n  return gulp.src([\"src/js/**/*.js\"])\n    // Your eslint pipe\n    .pipe(eslint(\".eslintrc\"))\n    .pipe(eslint.format(friendlyFormatter))\n    // Continue your other tasks\n    .pipe(concat(\"app.js\"))\n    .pipe(gulp.dest(\"dist/js\"))\n});\n```\n\nIt should work well in with eslint-grunt or grunt-eslint\n\n```javascript\ngrunt.initConfig({\n    // when using eslint-grunt:\n    eslint: {\n        options: {\n            formatter: './node_modules/eslint-friendly-formatter'\n        }),\n        target1: {\n            //..\n        }\n    },\n    // when using grunt-eslint:\n    eslint: {\n        options: {\n            format: './node_modules/eslint-friendly-formatter'\n        }),\n        target2: {\n            //..\n        }\n    }\n});\n```\n## Formatter parameters\n\n**UPDATE:**\n\nWe can pass variables to the formatter using a double dash at the end of the eslint command `-- --eff-by-issue`. So a new flag can be used to group eslint issues by `ruleId` instead as by file. This is useful if you want to fix at once all the errors/warnigs of the same kind.\n\n~~Eslint [does not support passing parameters to formatters from the cli](https://github.com/eslint/eslint/issues/2989) yet.So in order\nto pass parameters to the formatter we will have to rely on **environment variables**~~\n\n### Command line options\n\n#### --eff-filter\n\nOnly shows the `errors`/`warnigs` that match the given `ruleId` filter. This option will only filter the reported rules the error and warning counts will be the same as when all rules are reported same as the exit code.\n\n```bash\neslint -f node_modules/eslint-friendly-formatter client/**/*.js server/**/*.js -- --eff-by-issue --eff-filter 'global-require' # notice the --\n```\n\n#### --eff-by-issue\n\nNormally the reporter will group issues by file, which is handy for normal development. But there are some cases where you might want to fix all the errors of a same kind all at once. For those cases this flag can be used to make the reporter group the issues by ruleId.\n\n```bash\neslint -f node_modules/eslint-friendly-formatter client/**/*.js server/**/*.js -- --eff-by-issue # notice the --\n```\n\n**Important**: don't forget to add the flag at the end and after `-- ` otherwise it will be interpreted as a eslint parameter and will fail as that parameter is not known to eslint.\n\n### ENV Variables\n\n#### EFF_NO_GRAY\n\nDisable the gray color output\n\nWe use the gray color to show some info about the context where the error/warning happens. If for some reason you want to disable the gray color, [in cases like this one ](https://github.com/royriojas/eslint-friendly-formatter/pull/2), you can do it using an environment variable.\n\n```bash\nexport EFF_NO_GRAY=true\n```\n\nAnd the gray color won't be used.\n\n#### EFF_ABSOLUTE_PATHS\n\nMake the paths of the files in the reporter be absolute instead of relative as it is by default in the received results.\n\nSome terminals work better with relative paths (like `iTerm2` with `fish`) and other dislike it like `Guake`. So starting in version v.1.1.0 the paths will be relative by deafult. If you need the absolute please export the following variable\n\n```bash\nexport EFF_ABSOLUTE_PATHS=true\n```\n\n#### EFF_EDITOR_SCHEME\n\nIf this parameter is set, a url will be output below the filename.\n\nSome terminals only support clicking on urls, and editors can be configured to respond to custom url schemes.\n\n```bash\nexport EFF_EDITOR_SCHEME=editor://open?file={file}&line={line}&column={column}\n```\n\n## [Changelog](./changelog.md)\n\n## License\n\nMIT\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/royriojas/eslint-friendly-formatter.git"
  },
  "scripts": {
    "beautify": "esbeautifier './index.js' 'test/specs/**/*.js'",
    "beautify-check": "esbeautifier -k './index.js' 'test/specs/**/*.js'",
    "bump-major": "npm run pre-v && npm version major -m 'BLD: Release v%s' && npm run post-v",
    "bump-minor": "npm run pre-v && npm version minor -m 'BLD: Release v%s' && npm run post-v",
    "bump-patch": "npm run pre-v && npm version patch -m 'BLD: Release v%s' && npm run post-v",
    "changelog": "changelogx -f markdown -o ./changelog.md",
    "check": "npm run beautify-check && npm run eslint",
    "cover": "istanbul cover -x 'test/specs/**/*.js' mocha-runner 'test/specs/**/*.js' html text-summary",
    "do-changelog": "npm run changelog && git add ./changelog.md && git commit -m 'DOC: Generate changelog' --no-verify",
    "eslint": "eslint --format './index.js' index.js test/specs/ -c './configs/eslint.json'",
    "install-hooks": "prepush install && changelogx install-hook && precommit install",
    "lint": "npm run beautify-check && npm run eslint",
    "lint-fix": "npm run beautify && npm run eslint -- --fix",
    "post-v": "npm run do-changelog && git push --no-verify && git push --tags --no-verify",
    "pre-v": "npm run verify",
    "test": "npm run lint && mocha-runner 'test/specs/**/*.js'",
    "verify": "npm run check && npm test",
    "watch": "npm run cover && watch-spawn -i -p 'test/specs/**/*.js' istanbul cover test/runner.js html text-summary"
  },
  "version": "2.0.7"
}
